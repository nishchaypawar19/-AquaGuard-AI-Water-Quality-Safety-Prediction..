# -*- coding: utf-8 -*-
"""Copy of "Water Quality Safety Classification Model"

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mv70di1cyBmmhQKFTivAPQWzU_Xf9Ejg
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import classification_report, accuracy_score
from io import StringIO
import warnings
warnings.filterwarnings("ignore")

df=pd.read_csv('/content/water_quality_dataset.csv')
df.head()

df.isnull().sum()

df.describe()

# Visualization 1: Correlation Heatmap
plt.figure(figsize=(10, 8))
corr = df[features].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)
plt.title('Correlation Heatmap of Water Quality Features')
plt.tight_layout()
plt.show()

# Visualization 2: Bar Charts for Label Distribution
fig, axes = plt.subplots(1, 3, figsize=(15, 5))
for i, col in enumerate(targets):
    sns.countplot(x=col, data=df, ax=axes[i], palette='Set2')
    axes[i].set_title(f'Distribution of {col}')
    axes[i].set_xlabel(col)
    axes[i].set_ylabel('Count')
plt.tight_layout()
plt.show()

# Visualization 3: Feature Importance Plot
# Average feature importances across all target variables
feature_importances = np.mean([est.feature_importances_ for est in model.estimators_], axis=0)
importance_df = pd.DataFrame({'Feature': features, 'Importance': feature_importances})
importance_df = importance_df.sort_values(by='Importance', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=importance_df, palette='viridis')
plt.title('Feature Importance for Water Quality Prediction')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.tight_layout()
plt.show()



# Features and targets
features = ['pH', 'Dissolved_Oxygen_mgL', 'Turbidity_NTU', 'Total_Dissolved_Solids_mgL',
            'Nitrate_mgL', 'Phosphate_mgL', 'Temperature_C', 'Heavy_Metals_ppm']
X = df[features]
targets = ['Safe_for_Humans', 'Safe_for_Animals', 'Safe_for_Plants']
y = df[targets]

# Encode the labels (Safe/Unsafe to 1/0)
label_encoders = {}
for col in targets:
    le = LabelEncoder()
    y[col] = le.fit_transform(y[col])
    label_encoders[col] = le

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a multi-output classifier using RandomForest
base_model = RandomForestClassifier(n_estimators=100, random_state=42)
model = MultiOutputClassifier(base_model)
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Evaluate
for i, col in enumerate(targets):
    print(f"Classification report for {col}:")
    print(classification_report(y_test.iloc[:, i], y_pred[:, i]))
    print(f"Accuracy for {col}: {accuracy_score(y_test.iloc[:, i], y_pred[:, i])}\n")

# Example new water quality sample
new_data = pd.DataFrame([
    {
        'pH': 7.2,
        'Dissolved_Oxygen_mgL': 6.5,
        'Turbidity_NTU': 30.0,
        'Total_Dissolved_Solids_mgL': 500.0,
        'Nitrate_mgL': 20.0,
        'Phosphate_mgL': 2.5,
        'Temperature_C': 22.0,
        'Heavy_Metals_ppm': 0.05
    },
    {
        'pH': 8.8,
        'Dissolved_Oxygen_mgL': 4.5,
        'Turbidity_NTU': 70.0,
        'Total_Dissolved_Solids_mgL': 1200.0,
        'Nitrate_mgL': 40.0,
        'Phosphate_mgL': 5.0,
        'Temperature_C': 28.0,
        'Heavy_Metals_ppm': 0.3
    }
])

# Predictions
new_pred = model.predict(new_data)

# Decode labels
decoded_preds = []
for row in new_pred:
    decoded_row = {}
    for i, col in enumerate(targets):
        decoded_row[col] = label_encoders[col].inverse_transform([row[i]])[0]
    decoded_preds.append(decoded_row)

pred_df = pd.DataFrame(decoded_preds)
print("Predictions on new data:")
print(pred_df)

#  Visualization: Bar Chart of Predictions

plt.figure(figsize=(8, 5))
pred_counts = pred_df.melt(var_name="Category", value_name="Status") \
                    .groupby(["Category", "Status"]).size().reset_index(name="Count")

sns.barplot(x="Category", y="Count", hue="Status", data=pred_counts, palette="Set2")
plt.title("Water Safety Prediction Results for New Data")
plt.xlabel("Category")
plt.ylabel("Count")
plt.legend(title="Status")
plt.tight_layout()
plt.show()